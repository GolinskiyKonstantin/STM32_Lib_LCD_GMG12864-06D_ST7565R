/*	сохраняем данный файл в кодировке UTF-8		*/

// Делаем настройки в файле ST7565.h

/*
	подключение LCD_128_64_ST7565 ( GMG12864-06D ):

	в CubeMX включаем SPI только на отправку скорость максимум
	( пины желательно называем как в коде если нет то в коде ставим нужнве )

	CS   ->   CS ( chip select )
	RSE  ->   RESET
	RS   ->   DC ( date / command )
	SCL	 ->   SCL
	SI	 ->   MOSI
	VDD  ->   +3.3V
	VSS	 ->   GND
	A	 ->   anode led ( +3.3V or PWM )
	K	 ->   katode led ( GND )

*/

//##########  SETUP  ######################################################################################################################################

		//==== выбераем через что будем отправлять через HAL или CMSIS(быстрее) ==================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
			// указываем порт SPI для CMSIS ( быстро )-------
			// так как у разных МК разные регистры то в функциях корректируем под свой МК
			// на данный момент есть реализация на серию F1 F4 H7 для выбора серии в функциях
			//	void ST7565_SendCmd(uint8_t Cmd);
			//	void ST7565_SendData(uint8_t Data );
			// комментируем и раскомментируем то что нам нужно, также там же редактируем под свой МК если не работает
			#define 	ST7565_SPI_CMSIS 	SPI1
			//-----------------------------------------------
			
			// указываем порт SPI для HAL ( медлено )--------
			//#define 	ST7565_SPI_HAL 		hspi1
			//-----------------------------------------------
			
		//============================================================================
		
		//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
		#if defined (DC_GPIO_Port)
		#else
			#define DC_GPIO_Port		GPIOA
			#define DC_Pin				GPIO_PIN_11
		#endif
		
		#if defined (RESET_GPIO_Port)
		#else
			#define RESET_GPIO_Port   	GPIOA
			#define RESET_Pin			GPIO_PIN_12
		#endif
		
		//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
		// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
		
		#define CS_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef CS_PORT
			#if defined (CS_GPIO_Port)
			#else
				#define CS_GPIO_Port    GPIOA
				#define CS_Pin			GPIO_PIN_14
			#endif
		#endif
		
		//=============================================================================
		
		// выбираем ориентацию экрана ( если нужно повернуть на 180 градусов )
		// если не нужно то комментируем и получим 0 градусов
		//#define SCREEN_ORIENTATION_180
		
//##########################################################################################################################

// если экран будет другого разрешения чем 128 х 64 то редактируем параметр:

		/** Screen width in pixels (tested with 128) */
		#define SCREEN_WIDTH 	128
		/** Screen height in pixels (tested with 64) */
		#define SCREEN_HEIGHT 	64

// далее в файле fonts.h если не используем какойто шрифт то коментируем его для экономии памяти

//##############################################################################################################

//---- для экономии памяти шрифты которые не используються закоментировать -------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
//--------------------------------------------------------------------------------------------------------------

//##############################################################################################################





	#include "ST7565.h"

	#include "fonts.h"
	#include "bitmap.h"


	.........
	.........

main()=============================================================================================================================
	
	// инициализируем дисплей
	ST7565_Init();
	
	HAL_Delay(1000);
	
	// рисуем пиксель ( координаты ) вкл PIX_ON или выкл PIX_OFF пиксель
	ST7565_Draw_pixel( 5, 5, PIX_ON );// X(1 - 128)  Y(1 - 64)
	
	// инвертируем дисплей	1 -да 0 -нет
	ST7565_InvertDisplay( 1 );
	
	// очищаем дисплей
	ST7565_Clear();
	
	// 1-вкл или 0-откл дисплей ( данные сохраняються )
	ST7565_DisplayOnOff( 0 );
	
	// рисуем картинку ( координаты , имя массива с картинкой, размер картинки )
	ST7565_DrawBitmap( 1, 1, logo, 128, 27, PIX_ON );
	
	// РУССКИЙ шрифт 
	//Если пишем по РУССКИ то только через функцию utf8rus()
	ST7565_Print ( 10, 10, utf8rus("Привет HELLO"), &Font_6x8, 2, PIX_ON ); // печатаем надпись с указаным шрифтом и цветом ( 0- белый , 1 -черный )
	//незабываем каждый раз после вызова функции utf8rus() освобождать память
	free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
	
	// рисуем разные фигуры
	
	ST7565_DrawLine(20, 20, 30, 30,PIX_ON );

	ST7565_DrawRectangle(40, 40, 10, 20, PIX_ON );

	ST7565_DrawFilledRectangle(70, 30, 10, 20, PIX_ON );

	ST7565_DrawTriangle(20,20,50,30, 100,20, PIX_ON );

	ST7565_DrawFilledTriangle(20,20,51,31, 100,20, PIX_ON );

	ST7565_DrawCircle( 40, 40,20, PIX_ON );

	ST7565_DrawFilledCircle( 40, 40,20, PIX_ON );
	
	
	
	
////////////////  БЕГУЩАЯ СТРОКА  //////////////////////////////////////////////////////////////////////////////////////
	
	// переменные для того чтобы разбить всю строку на 3 куска
	// если будет меньше строка или больше то увеличиваем или уменшаем переменные
	int16_t x=128;
	int16_t y=128;
	int16_t z=128;

	char* text = utf8rus( " Ё ё Hello NEW Привет ВАСЯ 1983 123456789.WoT HoT" );
		
	const int size_byff = 128 / Font_6x8.FontWidth;	// 21
	
	// 21 кол-во символов размера Font_6x8 на ширину всего экрана 128 пикселей
	char textBuff[21];





	.........
	.........
	.........

while(1)===========================================================================================================================
		
		// разбиваем длинную строку на три куска по 21 символу ( если будет строка короче или длинее )
		// тогда убираем или добавляем условия
				
	
		if (x>-128){
			//memset(textBuff,0,sizeof(*textBuff));	// отчистка памяти от мусора
			memmove( textBuff, text + ( size_byff * 0 ), size_byff);
			ST7565_Print ( x, 10, textBuff, &Font_6x8, 1, PIX_ON ); // печатаем надпись с указаным шрифтом и цветом ( 0- белый , 1 -черный )
			x--;
		}
		if( x<1 && y>-128){
			//memset(textBuff,0,sizeof(*textBuff));	// отчистка памяти от мусора
			memmove( textBuff, text + ( size_byff * 1 ), size_byff);
			ST7565_Print ( y, 10, textBuff, &Font_6x8, 1, PIX_ON ); // печатаем надпись с указаным шрифтом и цветом ( 0- белый , 1 -черный )
			y--;
		}
		if( y<1 && z>-128){
			//memset(textBuff,0,sizeof(*textBuff));	// отчистка памяти от мусора
			memmove( textBuff, text + ( size_byff * 2 ), size_byff);
			ST7565_Print ( z, 10, textBuff, &Font_6x8, 1, PIX_ON ); // печатаем надпись с указаным шрифтом и цветом ( 0- белый , 1 -черный )
			z--;
		}
		if(x<-127 && y<-127 && z<-127){
			
			x=128;
			y=128;
			z=128;			
		}

		
		HAL_Delay(100);	// скорость
		
		ST7565_Clear();
		
		
////////////////////  конец бегущая строка /////////////////////////////////////////////////////////////////////////////////////////////////		
		
	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
